
/* ================================================================================ */
/* ====================== Этот файл заполняется пользователем! ==================== */ 
/* ================================================================================ */

/* ==================================  USER data ================================== */
/* ======== Базовые callback функции, вызываемые при срабатывании датчика. ======== */
/* ================================================================================ */

// Функция тревоги
void alarm_on()
{
  alarm_state = ALARM_VKL; // см. task.h
}

// Замыкание реле сирены
void sirena()
{
#if SIRENA_ENABLE
  // Включение сирены
  param.DTMF[0] = SIREN_ON_OFF;
#endif
  // Сброс датчиков
  sensors->Clear();
}

// Функции пультов управления

void guard_on()
{
  // Постановка на охрану
  param.DTMF[0] = GUARD_ON;
  // Сброс датчиков
  sensors->Clear();
}

void guard_off()
{
  // Снятие с охраны
  param.DTMF[0] = GUARD_OFF;
  // Сброс датчиков
  sensors->Clear();
}

/* =============== Сюда добавляем пользовательские callback функции =============== */


/* ================================  End USER data ================================ */


/* ================================================================================ */
/* =============== Запись имён датчиков во флеш для экономии памяти. ============== */
/* ================================================================================ */
/* ============ Записываем отображаемые в сообщениях названия датчиков ============ */
/* ============ Имя строки (door, move и т.д.) должно быть уникальным. ============ */
/* ============ Оно передаётся в качестве второго параметра в table[]  ============ */
/* ================================================================================ */

/* ==================================  USER data ================================== */
/* ========================== Пишем имена своих датчиков ========================== */

const char door[] PROGMEM="Дверь";
const char move[] PROGMEM="Движение";
const char temp[] PROGMEM="Температура";
const char pir1[] PROGMEM="ПИР 1";
const char pir2[] PROGMEM="ПИР 2";
const char pir3[] PROGMEM="ПИР 3";
const char pir4[] PROGMEM="ПИР 4";
const char pir5[] PROGMEM="ПИР 5";
const char pir6[] PROGMEM="ПИР 6";
const char p1k1[] PROGMEM="П1К1";
const char p1k2[] PROGMEM="П1К2";
const char p2k1[] PROGMEM="П2К1";
const char p2k2[] PROGMEM="П2К2";
const char p3k1[] PROGMEM="П3К1";
const char p3k2[] PROGMEM="П3К2";
const char p4k1[] PROGMEM="П4К1";
const char p4k2[] PROGMEM="П4К2";

/* ================================  End USER data ================================ */

/* Вносим параметры датчиков путём заполнения структур типа SENSOR_INIT_PARAM,      */
/* которая описана в файле main_type.h                                              */
/* Создаём массив этих структур table, и сразу заполняем его данными внутри скобок  */
/* {} через запятую.                                                                */

SENSOR_INIT_PARAM table[] = {

/* ==================================  USER data ================================== */
/* Вписываем параметры наших датчиков                                               */
/* ================================================================================ */
/* Датчики типа DIGITAL_SENSOR и ANALOG_SENSOR
/* Параметры:
/* -------------------------------------------------------------------------------- */
/* | Тип, Имя, Начальное состояние пина (0 или 1), callback функция, Пин |          */
/* -------------------------------------------------------------------------------- */
  {DIGITAL_SENSOR, door, 1, alarm_on, DOOR_PIN},  // геркон
  {DIGITAL_SENSOR, move, 0, alarm_on, RADAR_PIN}, // датчик движения
  
/* -------------------------------------------------------------------------------- */
/* Датчики температуры типа DHT11, DHT21, DHT22, DS18B20 и TERMISTOR                */
/* -------------------------------------------------------------------------------- */
/* | Тип, Имя, Min температуры, Max температуры, callback функция, Пин |            */
/* -------------------------------------------------------------------------------- */
/* Для датчиков температуры задаётся верхний и нижний порог срабатывания            */
/* По умолчанию нижний порог равен 0. Его можно не указывать.                       */
/* Тогда описание датчика выглядит аналогично предыдущему                           */
  
  {DS18B20, temp, 50, alarm_on, DOOR_PIN},
  // где значание 50 - это верхний порог срабатывания в 50 градусов.
  
/* Если нам нужно установить нижний порог срабатывания, отличный от нуля, то        */
/* необходимо сдвинуть его на 16 бит влево в старшие разряды,                       */
/* а в младшие записать значение верхнего порога срабатывания.                      */
/* Например, зададим его равным 10 градусам и  сдвинем на 16 позиций                */
/* т.е. (10 << 16)                                                                  */
/* Затем нужно сложить это значение с величиной верхнего порога 50 градусов         */
/* ((10 << 16) | 50)                                                                */
/* В таком виде записываем в структуру:                                             */

 // {DS18B20, temp, ((10 << 16) | 50), alarm_on, DOOR_PIN},

/* Компилятор посчитает ((10 << 16) | 50), и заменит это выражение цифрой 655410
/* или 0xA0032 в шестнадцатиричном представлении
/* Запись {DS18B20, temp, 0xA0032, alarm_on, DOOR_PIN}, эквивалентна предыдущей     */
/* 
/*
  {RC_SENSOR, pir1, 6936297, alarm_on},
  {RC_SENSOR, pir2, 15525097,alarm_on},
  {RC_SENSOR, pir3, 3808681, alarm_on},
  {RC_SENSOR, pir4, 13141673,alarm_on},
  {RC_SENSOR, pir5, 9435561, alarm_on},
  {RC_SENSOR, pir6, 13167785,alarm_on},
  // Выполнение команд с пульта управления
  // Пульт 1 кнопки 1-2
  {RC_SENSOR, p1k1, 13435328, guard_on},  // на охрану
  {RC_SENSOR, p1k2, 13435148, guard_off}, // с охраны
  // Пульт 2 кнопки 1-2
  {RC_SENSOR, p2k1, 225728, guard_on},    // на охрану
  {RC_SENSOR, p2k2, 225548, guard_off},   // с охраны
  // Пульт 3 кнопки 1-2
  {RC_SENSOR, p3k1, 16200128, guard_on},  // на охрану
  {RC_SENSOR, p3k2, 16199948, guard_off}, // с охраны
  // Пульт 4 кнопки 1-2
  {RC_SENSOR, p4k1, 12785600, guard_on},  // на охрану
  {RC_SENSOR, p4k2, 12785420, guard_off}  // с охраны
*/
  /* ================================  End USER data ================================ */
};